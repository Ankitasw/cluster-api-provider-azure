/*
Copyright 2021 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha4

import (
	apiconversion "k8s.io/apimachinery/pkg/conversion"
	utilconversion "sigs.k8s.io/cluster-api/util/conversion"

	infrav1beta1 "sigs.k8s.io/cluster-api-provider-azure/api/v1beta1"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// ConvertTo converts this AzureCluster to the Hub version (v1beta1).
func (src *AzureCluster) ConvertTo(dstRaw conversion.Hub) error { // nolint
	dst := dstRaw.(*infrav1beta1.AzureCluster)
	if err := Convert_v1alpha4_AzureCluster_To_v1beta1_AzureCluster(src, dst, nil); err != nil {
		return err
	}

	// Manually restore data.
	restored := &infrav1beta1.AzureCluster{}
	if ok, err := utilconversion.UnmarshalData(src, restored); err != nil || !ok {
		return err
	}

	// Restore list of virtual network peerings
	dst.Spec.NetworkSpec.Vnet.Peerings = restored.Spec.NetworkSpec.Vnet.Peerings

	if restored.Spec.NetworkSpec.NodeOutboundLB != nil {
		for i, _ := range restored.Spec.NetworkSpec.NodeOutboundLB.FrontendIPs {
			if restored.Spec.NetworkSpec.NodeOutboundLB.FrontendIPs[i].PublicIP != nil {
				dst.Spec.NetworkSpec.NodeOutboundLB.FrontendIPs[i].PublicIP.OutboundIP = restored.Spec.NetworkSpec.NodeOutboundLB.FrontendIPs[i].PublicIP.OutboundIP
			}
		}
	}

	if restored.Spec.NetworkSpec.APIServerLB.FrontendIPs != nil {
		for i, _ := range restored.Spec.NetworkSpec.APIServerLB.FrontendIPs {
			dst.Spec.NetworkSpec.APIServerLB.FrontendIPs[i].PublicIP = restored.Spec.NetworkSpec.APIServerLB.FrontendIPs[i].PublicIP
		}
	}

	if restored.Spec.NetworkSpec.ControlPlaneOutboundLB != nil {
		for i, _ := range restored.Spec.NetworkSpec.ControlPlaneOutboundLB.FrontendIPs {
			dst.Spec.NetworkSpec.ControlPlaneOutboundLB.FrontendIPs[i].PublicIP = restored.Spec.NetworkSpec.ControlPlaneOutboundLB.FrontendIPs[i].PublicIP
		}
	}

	if restored.Spec.BastionSpec.AzureBastion != nil {
		dst.Spec.BastionSpec.AzureBastion.PublicIP.OutboundIP = restored.Spec.BastionSpec.AzureBastion.PublicIP.OutboundIP
		dst.Spec.BastionSpec.AzureBastion.Subnet.NatGateway.NatGatewayIP.OutboundIP = restored.Spec.BastionSpec.AzureBastion.Subnet.NatGateway.NatGatewayIP.OutboundIP
	}

	for _, restoredSubnet := range restored.Spec.NetworkSpec.Subnets {
		for i, dstSubnet := range dst.Spec.NetworkSpec.Subnets {
			if dstSubnet.Name == restoredSubnet.Name {
				dst.Spec.NetworkSpec.Subnets[i].NatGateway.NatGatewayIP = restoredSubnet.NatGateway.NatGatewayIP
			}
		}
	}


	return nil
}

// ConvertFrom converts from the Hub version (v1beta1) to this version.
func (dst *AzureCluster) ConvertFrom(srcRaw conversion.Hub) error { // nolint
	src := srcRaw.(*infrav1beta1.AzureCluster)
	if err := Convert_v1beta1_AzureCluster_To_v1alpha4_AzureCluster(src, dst, nil); err != nil {
		return err
	}

	// Preserve Hub data on down-conversion.
	if err := utilconversion.MarshalData(src, dst); err != nil {
		return err
	}

	return nil
}

// ConvertTo converts this AzureClusterList to the Hub version (v1beta1).
func (src *AzureClusterList) ConvertTo(dstRaw conversion.Hub) error { // nolint
	dst := dstRaw.(*infrav1beta1.AzureClusterList)
	return Convert_v1alpha4_AzureClusterList_To_v1beta1_AzureClusterList(src, dst, nil)
}

// ConvertFrom converts from the Hub version (v1beta1) to this version.
func (dst *AzureClusterList) ConvertFrom(srcRaw conversion.Hub) error { // nolint
	src := srcRaw.(*infrav1beta1.AzureClusterList)
	return Convert_v1beta1_AzureClusterList_To_v1alpha4_AzureClusterList(src, dst, nil)
}

// Convert_v1beta1_VnetSpec_To_v1alpha4_VnetSpec.
func Convert_v1beta1_VnetSpec_To_v1alpha4_VnetSpec(in *infrav1beta1.VnetSpec, out *VnetSpec, s apiconversion.Scope) error { //nolint
	return autoConvert_v1beta1_VnetSpec_To_v1alpha4_VnetSpec(in, out, s)
}

// Convert_v1alpha4_VnetSpec_To_v1beta1_VnetSpec is an autogenerated conversion function.
func Convert_v1alpha4_VnetSpec_To_v1beta1_VnetSpec(in *VnetSpec, out *infrav1beta1.VnetSpec, s apiconversion.Scope) error {
	return autoConvert_v1alpha4_VnetSpec_To_v1beta1_VnetSpec(in, out, s)
}

// Convert_v1beta1_PublicIPSpec_To_v1alpha4_PublicIPSpec is an autogenerated conversion function.
func Convert_v1beta1_PublicIPSpec_To_v1alpha4_PublicIPSpec(in *infrav1beta1.PublicIPSpec, out *PublicIPSpec, s apiconversion.Scope) error {
    return autoConvert_v1beta1_PublicIPSpec_To_v1alpha4_PublicIPSpec(in, out, s)
}
